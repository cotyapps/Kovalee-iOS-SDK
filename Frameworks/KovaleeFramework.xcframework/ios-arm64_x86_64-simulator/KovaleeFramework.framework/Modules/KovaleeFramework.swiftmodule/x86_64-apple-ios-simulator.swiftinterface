// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KovaleeFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AppTrackingTransparency
import Foundation
@_exported import KovaleeFramework
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
public class KovaleeManager {
  public init(withStorage storage: KovaleeFramework.Storage = .userDefaults(), keys: KovaleeFramework.KovaleeKeys, eventTrackerManager: any KovaleeFramework.EventTrackerManager)
  public func setupAttributionManager(adjustWrapper: any KovaleeFramework.AttributionManager)
  public func setupPurchaseManager(purchaseManaegr: any KovaleeFramework.PurchaseManager)
  public func setupRemoteConfigurationManager(remoteConfigManager: any KovaleeFramework.RemoteConfigurationManager)
  public func setupAdsManager(adsManager: any KovaleeFramework.AdsManager)
  public func promptTrackingAuthorization(completion: @escaping (AppTrackingTransparency.ATTrackingManager.AuthorizationStatus) -> Swift.Void)
  public func getAttributionAdid() -> Swift.String?
  public func attributionCallback(withAdid adid: Swift.String?)
  public func setDefaultUserId()
  public func installationDate() -> Foundation.Date?
  public func appOpeningCount() -> Swift.Int
  public func sendEvent(_ event: KovaleeFramework.Event)
  public func setAmplitudeUserId(userId: Swift.String)
  public func amplitudeUserId() -> Swift.String?
  public func amplitudeDeviceId() -> Swift.String?
  public func setUserProperty(key: Swift.String, value: Swift.String)
  public func setUserProperty(property: KovaleeFramework.UserProperty)
  public func sendAppOpenEvent()
  public func isDataCollectionEnabled() -> Swift.Bool
  public func setDataCollectionEnabled(_ enabled: Swift.Bool)
  public var attributionManager: (any KovaleeFramework.AttributionManager)?
  public var trackerManager: (any KovaleeFramework.EventTrackerManager)?
  public var purchaseManager: (any KovaleeFramework.PurchaseManager)?
  public var remoteConfigManager: (any KovaleeFramework.RemoteConfigurationManager)?
  public var adsManager: (any KovaleeFramework.AdsManager)?
  @objc deinit
}
extension KovaleeFramework.KovaleeManager {
  public func setIsUserPremium(_ premium: Swift.Bool)
  public func setRevenueCatUserId(userId: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  public func customerInfo() async throws -> (any KovaleeFramework.AbstractCustomerInfo)?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func fetchOfferings() async throws -> (any KovaleeFramework.AbstractOfferings)?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func fetchCurrentOffering() async throws -> (any KovaleeFramework.AbstractOffering)?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func restorePurchases(fromSource source: Swift.String) async throws -> (any KovaleeFramework.AbstractCustomerInfo)?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func purchaseSubscription(withIdentifier subscriptionId: Swift.String, andDuration duration: Swift.Int, fromSource source: Swift.String) async throws -> (any KovaleeFramework.AbstractPurchaseResultData)?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func purchase(package: any KovaleeFramework.AbstractPackage, fromSource source: Swift.String) async throws -> (any KovaleeFramework.AbstractPurchaseResultData)?
  #endif
}
extension KovaleeFramework.KovaleeManager {
  public func startedPurchasing(subscriptionWithDuration duration: Swift.Int, fromSource source: Swift.String)
  public func succesfullyPurchased(subscriptionWithProductId productId: Swift.String, andDuration duration: Swift.Int, fromSource source: Swift.String)
  public func paymentCancelledForSubscription(fromSource source: Swift.String)
  public func paymentFailed(forSubscriptionWithDuration duration: Swift.Int, fromSource source: Swift.String)
  public func paymentRestoredStart(fromSource source: Swift.String)
  public func paymentRestoredFailed(fromSource source: Swift.String)
  public func paymentRestored(fromSource source: Swift.String)
}
extension KovaleeFramework.KovaleeManager {
  public func setDefaultValues(_ values: [Swift.String : Any])
  #if compiler(>=5.3) && $AsyncAwait
  public func remoteValue(forKey key: Swift.String) async throws -> Foundation.Data
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func abTestValue(forKey key: Swift.String) async -> Foundation.Data?
  #endif
}
extension KovaleeFramework.KovaleeManager {
  public func showMediationDebugger()
  #if compiler(>=5.3) && $AsyncAwait
  public func loadInterstitialAd() async -> Swift.Bool?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func showInterstitialAd() async -> Swift.Bool?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func loadRewardedAd() async -> Swift.Bool?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func showRewardedAd() async -> (any KovaleeFramework.AbstractReward)?
  #endif
}
public struct KLogger {
  public static var logLevel: KovaleeFramework.LogLevel
}
extension KovaleeFramework.KLogger {
  public static func debug(_ message: Swift.String, fileName: Swift.String? = #fileID, functionName: Swift.String? = #function, line: Swift.UInt = #line)
  public static func info(_ message: Swift.String, fileName: Swift.String? = #fileID, functionName: Swift.String? = #function, line: Swift.UInt = #line)
  public static func warn(_ message: Swift.String, fileName: Swift.String? = #fileID, functionName: Swift.String? = #function, line: Swift.UInt = #line)
  public static func error(_ message: Swift.String, fileName: Swift.String = #fileID, functionName: Swift.String = #function, line: Swift.UInt = #line)
}
public enum LogLevel : Swift.Int {
  case verbose
  case debug
  case info
  case warn
  case error
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension KovaleeFramework.LogLevel : Swift.Comparable {
  public static func < (lhs: KovaleeFramework.LogLevel, rhs: KovaleeFramework.LogLevel) -> Swift.Bool
}
public struct KovaleeConstants {
  public static let keysFileName: Swift.String
}
public struct KovaleeKeys : Swift.Decodable {
  public let appCode: Swift.String
  public let liteVersion: Swift.Bool?
  public let adjust: Swift.String?
  public let amplitude: KovaleeFramework.KovaleeKeys.Amplitude
  public let revenueCat: KovaleeFramework.KovaleeKeys.RevenueCat?
  public let firebase: KovaleeFramework.KovaleeKeys.Firebase?
  public let applovin: KovaleeFramework.KovaleeKeys.Applovin?
  public let conversionValue: KovaleeFramework.KovaleeKeys.ConversionValue?
  public struct Amplitude : Swift.Decodable {
    public var prodSDKId: Swift.String
    public var devSDKId: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct RevenueCat : Swift.Decodable {
    public var sdkId: Swift.String
    public var observerMode: Swift.Bool
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Firebase : Swift.Decodable {
    public var appId: Swift.String
    public var apiKey: Swift.String
    public var senderId: Swift.String
    public var projectId: Swift.String
    public var configuredInApp: Swift.Bool
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Applovin : Swift.Decodable {
    public var sdkId: Swift.String
    public var interstitialUnitId: Swift.String
    public var rewardedUnitId: Swift.String
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ConversionValue : Swift.Decodable {
    public let bottomTier: [Swift.String : Swift.Int]
    public let topTier: [Swift.String : Swift.Int]
    public let usTier: [Swift.String : Swift.Int]
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension KovaleeFramework.Reader where T == KovaleeFramework.KovaleeKeys {
  public static let kovaleeKeysReader: KovaleeFramework.Reader<KovaleeFramework.KovaleeKeys>
}
public enum FileReaderError : Swift.Error {
  case fileNotFound
  case fileEmpty
  public static func == (a: KovaleeFramework.FileReaderError, b: KovaleeFramework.FileReaderError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Reader<T> where T : Swift.Decodable {
  public var load: (Foundation.URL?) throws -> T
}
public enum StorageKeys : Swift.String {
  case isUserPremium
  case appOpenedCount
  case appInstallationDate
  case userSubscription
  case conversionValue
  case amplitudeUserId
  case isFirstAppOpening
  case abExperimentValue
  case abExperimentKey
  case isDataCollectionEnabled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UserSubscription : Swift.String {
  case notSubscribed
  case monthlySubscription
  case yearlySubscription
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Storage {
  public var hydrateFromStorage: (KovaleeFramework.StorageKeys, Any?) -> Any?
  public var persistToStorage: (KovaleeFramework.StorageKeys, Any) -> Swift.Void
  public var removeFromStorage: (KovaleeFramework.StorageKeys) -> Swift.Void
}
extension KovaleeFramework.Storage {
  public static func userDefaults(defaults: Foundation.UserDefaults = UserDefaults.standard) -> KovaleeFramework.Storage
}
extension Foundation.ProcessInfo {
  public static var isRunningTests: Swift.Bool {
    get
  }
}
public struct AdjustConfiguration {
  public enum Environment : Swift.String {
    case production
    case development
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var environment: KovaleeFramework.AdjustConfiguration.Environment
  public var token: Swift.String
  public init(environment: Swift.String, token: Swift.String)
}
public protocol AttributionManager {
  func getAttributionAdid() -> Swift.String?
  func promptTrackingAuthorization(completion: @escaping (AppTrackingTransparency.ATTrackingManager.AuthorizationStatus) -> Swift.Void)
  func sendConversionValue_SKA3(value: Swift.Int)
  func sendConversionValue_SKA4(value: Swift.Int, coarseValue: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  func setDataCollectionEnabled(_ enabled: Swift.Bool)
  var attributionAdidCallback: (Swift.String?) -> Swift.Void { get }
  var configuration: KovaleeFramework.AdjustConfiguration { get }
}
public protocol EventTrackerManager {
  func sendEvent(_ event: KovaleeFramework.Event)
  func setUserId(_ userId: Swift.String)
  func setDeviceId(_ deviceId: Swift.String)
  func setUserProperty(key: Swift.String, value: Swift.String)
  func setUserProperty(property: KovaleeFramework.UserProperty)
  func setDataCollectionEnabled(_ enabled: Swift.Bool)
  func getUserId() -> Swift.String?
  func getDeviceId() -> Swift.String?
}
public protocol RemoteConfigurationManager {
  func setDefaultValues(_ values: [Swift.String : Any])
  #if compiler(>=5.3) && $AsyncAwait
  func value(forKey key: Swift.String) async throws -> Foundation.Data
  #endif
  func setDataCollectionEnabled(_ enabled: Swift.Bool)
}
public protocol PurchaseManager {
  func setUserId(userId: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  func fetchOfferings() async throws -> (any KovaleeFramework.AbstractOfferings)?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func fetchCurrentOffering() async throws -> (any KovaleeFramework.AbstractOffering)?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func restorePurchases() async throws -> (any KovaleeFramework.AbstractCustomerInfo)?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func purchase(package: any KovaleeFramework.AbstractPackage) async throws -> any KovaleeFramework.AbstractPurchaseResultData
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func purchaseProduct(withId productId: Swift.String) async throws -> any KovaleeFramework.AbstractPurchaseResultData
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func customerInfo() async throws -> any KovaleeFramework.AbstractCustomerInfo
  #endif
  func setAttribution(adid: Swift.String)
  func setAmplitudeUserId(userId: Swift.String)
}
public protocol AbstractCustomerInfo {
  var activeSubscriptions: Swift.Set<Swift.String> { get }
}
public protocol AbstractOfferings {
}
public protocol AbstractOffering {
}
public protocol AbstractPurchaseResultData {
  var userCancelled: Swift.Bool { get }
}
public protocol AbstractPackage {
  var productIdentifier: Swift.String { get }
  var rcPackage: Any { get }
  func getDuration() -> Swift.Int
}
public protocol AdsManager {
  func showMediationDebugger()
  #if compiler(>=5.3) && $AsyncAwait
  func createInterstitialAd() async throws -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func showInterstitialAd() async throws -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func createRewardedAd() async throws -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func showRewardedAd() async throws -> (any KovaleeFramework.AbstractReward)?
  #endif
  func setDataCollectionEnabled(_ enabled: Swift.Bool)
}
public protocol AbstractReward {
  var label: Swift.String { get }
  var amount: Swift.Int { get }
}
public enum KovaleeError : Swift.Error {
  case firebaseNotInitialized
  case remoteValueAlreadyUsedForABTest
  case remoteValueFetchError
  public static func == (a: KovaleeFramework.KovaleeError, b: KovaleeFramework.KovaleeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension KovaleeFramework.KovaleeError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct ConversionValueManager {
  public init(keys: KovaleeFramework.KovaleeKeys, locale: Swift.String?, liteVersion: Swift.Bool, storage: KovaleeFramework.Storage = .userDefaults())
}
extension KovaleeFramework.ConversionValueManager {
  public func coarseValue() -> Swift.String
  public mutating func conversionValue(fromEvent event: KovaleeFramework.Event) -> Swift.Int?
}
public enum DefaultEvents {
  case firstAppOpen
  case appOpen
  case naAttActivate
  case naAttDeactivate
  case paymentCancel(source: Swift.String)
  case paymentFailure(source: Swift.String, duration: Swift.Int)
  case paymentFinish(source: Swift.String, duration: Swift.Int, product: Swift.String)
  case paymentRestoreStart(source: Swift.String)
  case paymentRestoreFinish(source: Swift.String)
  case paymentRestoreFail(source: Swift.String)
  case paymentStart(source: Swift.String, duration: Swift.Int)
  case updateConversionValue(number: Swift.Int)
  case conversionValueError(error: Swift.String)
  case adsInterstitialShow
  case adsRewardedShow
  public var name: Swift.String {
    get
  }
  public var properties: [Swift.String : Any]? {
    get
  }
}
public enum UserProperty {
  case premium(value: Swift.String)
  case adid(value: Swift.String)
  case abTestVersion(value: Swift.String)
  public var key: Swift.String {
    get
  }
  public var value: Swift.String {
    get
  }
}
public enum BasicEvent {
  case pageView(screen: Swift.String)
  case pageViewPaywall(source: Swift.String)
  case notificationActivate
  case notificationDeactivate
  case acClick(name: Swift.String)
  case acContentClick(name: Swift.String)
  public var name: Swift.String {
    get
  }
  public var properties: [Swift.String : Any]? {
    get
  }
}
public struct Event {
  public var name: Swift.String
  public var properties: [Swift.String : Any]?
  public init(name: Swift.String, properties: [Swift.String : Any]? = nil)
  public init(event: KovaleeFramework.DefaultEvents)
}
extension KovaleeFramework.Event : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension KovaleeFramework.Event {
  public var serialization: Swift.String {
    get
  }
}
extension Swift.String {
  public var serialization: Swift.String {
    get
  }
}
extension Swift.Dictionary where Key == Swift.String, Value == Any {
  public var serialization: Swift.String {
    get
  }
}
extension KovaleeFramework.LogLevel : Swift.Hashable {}
extension KovaleeFramework.LogLevel : Swift.RawRepresentable {}
extension KovaleeFramework.FileReaderError : Swift.Equatable {}
extension KovaleeFramework.FileReaderError : Swift.Hashable {}
extension KovaleeFramework.StorageKeys : Swift.Equatable {}
extension KovaleeFramework.StorageKeys : Swift.Hashable {}
extension KovaleeFramework.StorageKeys : Swift.RawRepresentable {}
extension KovaleeFramework.UserSubscription : Swift.Equatable {}
extension KovaleeFramework.UserSubscription : Swift.Hashable {}
extension KovaleeFramework.UserSubscription : Swift.RawRepresentable {}
extension KovaleeFramework.AdjustConfiguration.Environment : Swift.Equatable {}
extension KovaleeFramework.AdjustConfiguration.Environment : Swift.Hashable {}
extension KovaleeFramework.AdjustConfiguration.Environment : Swift.RawRepresentable {}
extension KovaleeFramework.KovaleeError : Swift.Equatable {}
extension KovaleeFramework.KovaleeError : Swift.Hashable {}
