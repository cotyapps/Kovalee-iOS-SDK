// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-upcoming-feature ConciseMagicFile -enable-upcoming-feature ForwardTrailingClosures -enable-upcoming-feature StrictConcurrency -enable-upcoming-feature DeprecateApplicationMain -enable-upcoming-feature ImportObjcForwardDeclarations -enable-upcoming-feature DisableOutwardActorInference -enable-upcoming-feature IsolatedDefaultValues -enable-upcoming-feature GlobalConcurrency -enable-upcoming-feature InferSendableFromCaptures -enable-upcoming-feature ImplicitOpenExistentials -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name KovaleeFramework
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AppTrackingTransparency
import Foundation
@_exported import KovaleeFramework
import OSLog
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
final public class KovaleeManager {
  public init(keys: KovaleeFramework.KovaleeKeys, sdkVersion: Swift.String, eventTrackerManager: any KovaleeFramework.EventTrackerManager, attributionManager: any KovaleeFramework.AttributionManager, purchaseManager: any KovaleeFramework.PurchaseManager, remoteConfigManager: any KovaleeFramework.RemoteConfigurationManager, surveyManager: (any KovaleeFramework.SurveyManager)?, alreadyIntegrated: Swift.Bool)
  @objc deinit
}
extension KovaleeFramework.KovaleeManager {
  final public func setupConversionManager() async
  final public func flushCachedEvents() async
  final public func fetchEventsSequence(sequenceVersion: Swift.Int) async
}
extension KovaleeFramework.KovaleeManager : @unchecked Swift.Sendable {
}
public enum KLogger {
  public static var logLevel: KovaleeFramework.LogLevel {
    get
    set
  }
}
extension KovaleeFramework.KLogger {
  public static func debug(_ message: Swift.String, fileName: Swift.String? = #fileID, functionName: Swift.String? = #function, line: Swift.UInt = #line)
  public static func info(_ message: Swift.String, fileName: Swift.String? = #fileID, functionName: Swift.String? = #function, line: Swift.UInt = #line)
  public static func warn(_ message: Swift.String, fileName: Swift.String? = #fileID, functionName: Swift.String? = #function, line: Swift.UInt = #line)
  public static func error(_ message: Swift.String, fileName: Swift.String = #fileID, functionName: Swift.String = #function, line: Swift.UInt = #line)
}
public enum LogLevel : Swift.Int, Swift.Comparable, Swift.Sendable {
  case verbose
  case debug
  case info
  case warn
  case error
  public var description: Swift.String {
    get
  }
  public static func < (lhs: KovaleeFramework.LogLevel, rhs: KovaleeFramework.LogLevel) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum KovaleeConstants {
  public static let keysFileName: Swift.String
}
public struct KovaleeKeys : Swift.Decodable, Swift.Sendable {
  public let appCode: Swift.String
  public let adjust: Swift.String?
  public let amplitude: KovaleeFramework.KovaleeKeys.Amplitude
  public let revenueCat: KovaleeFramework.KovaleeKeys.RevenueCat?
  public let firebase: KovaleeFramework.KovaleeKeys.Firebase?
  public let survicate: KovaleeFramework.KovaleeKeys.Survicate?
  public struct Amplitude : Swift.Decodable, Swift.Sendable {
    public var prodSDKId: Swift.String
    public var devSDKId: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct RevenueCat : Swift.Decodable, Swift.Sendable {
    public var sdkId: Swift.String
    public var observerMode: Swift.Bool
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Firebase : Swift.Decodable, Swift.Sendable {
    public var configuredInApp: Swift.Bool
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Survicate : Swift.Decodable, Swift.Sendable {
    public let sdkId: Swift.String
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension KovaleeFramework.Reader where T == KovaleeFramework.KovaleeKeys {
  public static let kovaleeKeysReader: KovaleeFramework.Reader<KovaleeFramework.KovaleeKeys>
}
extension KovaleeFramework.KovaleeManager {
  final public func removeUserFromBundle()
  final public func isUserInBundle(email: Swift.String) async throws -> Swift.Bool
}
public enum FileReaderError : Swift.Error {
  case fileNotFound
  case fileEmpty
  public static func == (a: KovaleeFramework.FileReaderError, b: KovaleeFramework.FileReaderError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Reader<T> where T : Swift.Decodable {
  public var load: @Sendable (Foundation.URL?) throws -> T
}
extension KovaleeFramework.Reader : Swift.Sendable where T : Swift.Sendable {
}
public enum StorageKeys : Swift.String, Swift.Sendable {
  case isUserPremium
  case appOpenedCount
  case appInstallationDate
  case conversionValue
  case coarseValue
  case sdkVersion
  case isDataCollectionEnabled
  case isFirstAppOpening
  case eventsSequencesFetched
  case sequenceVersion
  case parsingLogic
  case isUserInBundle
  case nttTrackingPromptStatus
  case adid
  case rcInitialized
  case rcIdCache
  case abExperimentValue
  case abExperimentKey
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StorageResult : Swift.Sendable, Swift.Equatable {
  case value(any Swift.Sendable)
  case nilValue
  case noValue
  public static func == (lhs: KovaleeFramework.StorageResult, rhs: KovaleeFramework.StorageResult) -> Swift.Bool
  public func unwrapValue<T>(as _: T.Type = T.self, default defaultValue: T) -> T
  public func unwrapOptionalValue<T>(as _: T.Type = T.self) -> T?
  public func unwrapWithExistence<T>(as _: T.Type = T.self, default defaultValue: T) -> (value: T, exists: Swift.Bool)
}
public enum StorageError : Swift.Error {
  case keyNotFound
  case nilValue
  case typeMismatch
  case timeout
  public static func == (a: KovaleeFramework.StorageError, b: KovaleeFramework.StorageError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public actor StorageActor {
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
extension Foundation.UserDefaults : @unchecked @retroactive Swift.Sendable {
}
extension Foundation.ProcessInfo {
  public static var isRunningTests: Swift.Bool {
    get
  }
}
extension Foundation.Bundle {
  public static var isRunningOnTestFlight: Swift.Bool {
    get
  }
}
public struct AdjustConfiguration : Swift.Sendable {
  public enum Environment : Swift.String, Swift.Sendable {
    case production
    case development
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var environment: KovaleeFramework.AdjustConfiguration.Environment
  public var token: Swift.String
  public init(environment: Swift.String, token: Swift.String)
}
public protocol AttributionManager : Swift.Sendable {
  func getAttributionAdid() async -> Swift.String?
  func promptTrackingAuthorization(completion: @escaping (AppTrackingTransparency.ATTrackingManager.AuthorizationStatus) -> Swift.Void)
  func sendConversionValue(value: Swift.Int, coarseValue: Swift.String?, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  func setDataCollectionEnabled(_ enabled: Swift.Bool)
  func setAttributionDelegate(_ delegate: any KovaleeFramework.KovaleeAttributionDelegate)
}
public protocol KovaleeAttributionDelegate : Swift.Sendable {
  func adjustDeferredDeeplinkReceived(_ deeplink: Foundation.URL?) -> Swift.Bool
}
public protocol EventTrackerManager : Swift.Sendable {
  func sendEvent(_ event: KovaleeFramework.Event)
  func setUserId(_ userId: Swift.String)
  func setDeviceId(_ deviceId: Swift.String)
  func setUserProperty(key: Swift.String, value: Swift.String)
  func setUserProperty(property: KovaleeFramework.UserProperty)
  func setUserProperties(_ properties: [Swift.String : Swift.String])
  func setDataCollectionEnabled(_ enabled: Swift.Bool)
  func getUserId() -> Swift.String?
  func getDeviceId() -> Swift.String?
}
public protocol RemoteConfigurationManager : Swift.Sendable {
  func setFetchTimeout(_ timeout: Swift.Double)
  func fetchAndActivateRemoteConfig() async
  func setDefaultValues(_ values: [Swift.String : Any])
  func value(forKey key: Swift.String) async throws -> Foundation.Data
  func setDataCollectionEnabled(_ enabled: Swift.Bool)
}
public protocol PurchaseManager : Swift.Sendable {
  func revenueCatUserId() -> Swift.String
  func setUserId(userId: Swift.String)
  func setUserId(userId: Swift.String) async throws -> (any KovaleeFramework.AbstractCustomerInfo, created: Swift.Bool)
  func setEmail(email: Swift.String)
  func logout() async throws -> any KovaleeFramework.AbstractCustomerInfo
  func setAttribution(adid: Swift.String)
  func setAmplitudeUserId(userId: Swift.String)
  func syncPurchase() async throws -> any KovaleeFramework.AbstractCustomerInfo
  func customerInfo() async throws -> any KovaleeFramework.AbstractCustomerInfo
  func fetchOfferings() async throws -> (any KovaleeFramework.AbstractOfferings)?
  func fetchCurrentOffering() async throws -> (any KovaleeFramework.AbstractOffering)?
  func restorePurchases() async throws -> any KovaleeFramework.AbstractCustomerInfo
  func purchase(package: any KovaleeFramework.AbstractPackage) async throws -> any KovaleeFramework.AbstractPurchaseResultData
  func purchaseProduct(withId productId: Swift.String) async throws -> any KovaleeFramework.AbstractPurchaseResultData
  func checkTrialOrIntroDiscountEligibility(productIdentifiers: [Swift.String]) async -> [Swift.String : Swift.Int]
  func setPurchaseDelegate(_ delegate: any KovaleeFramework.KovaleePurchasesDelegate)
}
public protocol KovaleePurchasesDelegate : Swift.Sendable {
  func didReceiveUpdate(_ customerInfo: any KovaleeFramework.AbstractCustomerInfo)
}
public protocol AbstractCustomerInfo {
  var activeSubscriptions: Swift.Set<Swift.String> { get }
  var activeEntitlements: Swift.Bool { get }
}
public protocol AbstractOfferings {
}
public protocol AbstractOffering {
}
public protocol AbstractPurchaseResultData {
  var userCancelled: Swift.Bool { get }
}
public protocol AbstractPackage : Swift.Sendable {
  var productIdentifier: Swift.String { get }
  var rcPackage: any Swift.Sendable { get }
  func getDuration() -> Swift.Int
}
public protocol AbstractReward {
  var label: Swift.String { get }
  var amount: Swift.Int { get }
}
public protocol PaywallManager {
}
public protocol KovaleeSurveyDelegate : AnyObject {
  func surveyDisplayed(surveyId: Swift.String)
  func surveyCompleted(surveyId: Swift.String)
  func surveyClosed(surveyId: Swift.String)
}
public protocol SurveyManager : Swift.Sendable {
  func sendEvent(with name: Swift.String, andProperties properties: [Swift.String : Any]?)
  func viewScreen(with name: Swift.String)
  func setUserProperty(withName name: Swift.String, andValue value: Swift.String)
  func setUserProperties(_ properties: [Swift.String : Swift.String])
  func setAmplitudeUserId(userId: Swift.String)
  func setSurveyDelegate(_ delegate: any KovaleeFramework.KovaleeSurveyDelegate)
}
extension KovaleeFramework.KovaleeManager {
  final public func setupAttributionManager()
  final public func setupPurchaseManager()
  final public func promptTrackingAuthorization(completion: @escaping (AppTrackingTransparency.ATTrackingManager.AuthorizationStatus) -> Swift.Void)
  final public func getAttributionAdid() async -> Swift.String?
  final public func attributionCallback(withAdid adid: Swift.String?)
  final public func setAttributionDelegate(_ delegate: any KovaleeFramework.KovaleeAttributionDelegate)
  final public func installationDate() -> Foundation.Date?
  final public func appOpeningCount() -> Swift.Int
  final public func currentSequencesFileName() -> Swift.String?
  final public func currentEventsSequence() -> Swift.String
  final public func userConversionValue() -> Swift.Int
  final public func userCoarseValue() -> Swift.String?
  final public func sequenceVersion() -> Swift.Int
  final public func setSequenceVersion(_ version: Swift.Int)
  final public func parsingLogic() -> Swift.Int
  final public func setParsingLogic(_ logic: Swift.Int)
  final public func resetApp() async
  final public func resetCVManager()
  final public func sendEvent(_ event: KovaleeFramework.Event)
  final public func setAmplitudeUserId(userId: Swift.String)
  final public func amplitudeUserId() -> Swift.String?
  final public func amplitudeDeviceId() -> Swift.String?
  final public func setUserProperty(key: Swift.String, value: Swift.String)
  final public func setUserProperties(_ properties: [Swift.String : Swift.String])
  final public func setUserProperty(property: KovaleeFramework.UserProperty)
  final public func canSendEvents() -> Swift.Bool
  final public func isDataCollectionEnabled() -> Swift.Bool
  final public func setDataCollectionEnabled(_ enabled: Swift.Bool)
  final public func setDebugMode(_ on: Swift.Bool)
  final public func debugModeOn() -> Swift.Bool
}
public enum KovaleeError : Swift.Error {
  case firebaseNotInitialized
  case remoteValueAlreadyUsedForABTest
  case remoteValueFetchError
  case userAlreadyInBundle
  public static func == (a: KovaleeFramework.KovaleeError, b: KovaleeFramework.KovaleeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension KovaleeFramework.KovaleeError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension KovaleeFramework.KovaleeManager {
  final public func setPurchaseDelegate(_ delegate: any KovaleeFramework.KovaleePurchasesDelegate)
  final public func revenueCatUserId() -> Swift.String?
  final public func setIsUserPremium(_ premium: Swift.Bool)
  final public func setRevenueCatUserId(userId: Swift.String)
  final public func setRevenueCatUserId(userId: Swift.String) async throws -> (any KovaleeFramework.AbstractCustomerInfo, created: Swift.Bool)?
  final public func setRevenueCatEmail(email: Swift.String)
  final public func logoutRevenueCatUser() async throws -> (any KovaleeFramework.AbstractCustomerInfo)?
  final public func syncPurchase() async throws -> (any KovaleeFramework.AbstractCustomerInfo)?
  final public func customerInfo() async throws -> (any KovaleeFramework.AbstractCustomerInfo)?
  final public func fetchOfferings() async throws -> (any KovaleeFramework.AbstractOfferings)?
  final public func fetchCurrentOffering() async throws -> (any KovaleeFramework.AbstractOffering)?
  final public func restorePurchases(fromSource source: Swift.String) async throws -> (any KovaleeFramework.AbstractCustomerInfo)?
  final public func purchaseSubscription(withIdentifier subscriptionId: Swift.String, andDuration _: Swift.Int, fromSource source: Swift.String) async throws -> (any KovaleeFramework.AbstractPurchaseResultData)?
  final public func purchase(package: any KovaleeFramework.AbstractPackage, fromSource source: Swift.String) async throws -> (any KovaleeFramework.AbstractPurchaseResultData)?
  final public func checkTrialOrIntroDiscountEligibility(productIdentifiers: [Swift.String]) async -> [Swift.String : Swift.Int]?
}
extension KovaleeFramework.KovaleeManager {
  public struct OnboardingDataResponse : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct UserOnboardingData : Swift.Codable {
    public var userExists: Swift.Bool
    public var onboardingCompleted: Swift.Bool
    public var onboardingData: [Swift.String : Swift.String]
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum OnboardingDataError : Swift.Error {
    case networkError(any Swift.Error)
    case invalidResponse
    case invalidRequest
  }
  final public func userOnboardingData(userId: Swift.String) async throws -> KovaleeFramework.KovaleeManager.UserOnboardingData
}
extension KovaleeFramework.KovaleeManager {
  final public func startedPurchasing(subscriptionWithId productId: Swift.String, fromSource source: Swift.String)
  final public func succesfullyPurchased(subscriptionWithProductId productId: Swift.String, fromSource source: Swift.String)
  final public func paymentCancelledForSubscription(fromSource source: Swift.String)
  final public func paymentFailed(forSubscriptionWithId productId: Swift.String, fromSource source: Swift.String)
  final public func paymentRestoredStart(fromSource source: Swift.String)
  final public func paymentRestoredFailed(fromSource source: Swift.String)
  final public func paymentRestored(fromSource source: Swift.String)
}
extension KovaleeFramework.KovaleeManager {
  final public func setSurveyDelegate(_ delegate: any KovaleeFramework.KovaleeSurveyDelegate)
}
extension KovaleeFramework.KovaleeManager {
  final public func setDefaultValues(_ values: [Swift.String : Any])
  final public func remoteValue(forKey key: Swift.String) async throws -> Foundation.Data
  final public func localABTestValue() -> Swift.String?
  final public func abTestValue(forKey key: Swift.String) async -> Swift.String?
  final public func setAbTestValue(_ value: Swift.String)
  final public func setFetchTimeout(_ timeout: Swift.Double)
}
public enum DefaultEvents {
  case firstAppOpen
  case appOpen
  case naAttActivate
  case naAttDeactivate
  case paymentCancel(source: Swift.String)
  case paymentFailure(source: Swift.String, product: Swift.String)
  case paymentFinish(source: Swift.String, product: Swift.String)
  case paymentRestoreStart(source: Swift.String)
  case paymentRestoreFinish(source: Swift.String)
  case paymentRestoreFail(source: Swift.String)
  case paymentStart(source: Swift.String, product: Swift.String)
  case updateConversionValue(number: Swift.Int, category: Swift.String)
  case conversionValueError(error: Swift.String)
  case adsInterstitialShow
  case adsRewardedShow
  case settingUserAsPremium(source: Swift.String)
  public var name: Swift.String {
    get
  }
  public var properties: [Swift.String : any Swift.Sendable]? {
    get
  }
}
public enum UserProperty {
  case appCode(value: Swift.String)
  case premium(value: Swift.String)
  case bundle(value: Swift.String)
  case emailDomain(value: Swift.String)
  case adid(value: Swift.String)
  case abTestVersion(value: Swift.String)
  case sdkVersion(value: Swift.String)
  case environment(value: Swift.String)
  public var key: Swift.String {
    get
  }
  public var value: Swift.String {
    get
  }
}
public enum BasicEvent {
  case pageView(screen: Swift.String)
  case pageViewPaywall(source: Swift.String)
  case notificationActivate
  case notificationDeactivate
  case acClick(name: Swift.String)
  case acContentClick(name: Swift.String)
  public var name: Swift.String {
    get
  }
  public var properties: [Swift.String : any Swift.Sendable]? {
    get
  }
}
public struct ParsingLogic {
}
public struct Event : Swift.Sendable {
  public var name: Swift.String
  public var properties: [Swift.String : any Swift.Sendable]?
  public var isSystemEvent: Swift.Bool
  public init(name: Swift.String, properties: [Swift.String : any Swift.Sendable]? = nil, isSystemEvent: Swift.Bool = false)
  public init(event: KovaleeFramework.DefaultEvents, isSystemEvent: Swift.Bool = false)
}
extension KovaleeFramework.Event : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension KovaleeFramework.Event {
  public var serialization: Swift.String {
    get
  }
}
extension Swift.String {
  public var serialization: Swift.String {
    get
  }
}
extension Swift.Dictionary where Key == Swift.String {
  public var serialization: Swift.String {
    get
  }
}
public struct ConversionValue : Swift.Decodable, Swift.Sendable {
  public enum CoarseValue : Swift.String, Swift.Decodable, Swift.Sendable {
    case low
    case medium
    case high
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(value: Swift.Int, coarseValue: KovaleeFramework.ConversionValue.CoarseValue?)
  public init(from decoder: any Swift.Decoder) throws
}
extension KovaleeFramework.LogLevel : Swift.Hashable {}
extension KovaleeFramework.LogLevel : Swift.RawRepresentable {}
extension KovaleeFramework.FileReaderError : Swift.Equatable {}
extension KovaleeFramework.FileReaderError : Swift.Hashable {}
extension KovaleeFramework.StorageKeys : Swift.Equatable {}
extension KovaleeFramework.StorageKeys : Swift.Hashable {}
extension KovaleeFramework.StorageKeys : Swift.RawRepresentable {}
extension KovaleeFramework.StorageError : Swift.Equatable {}
extension KovaleeFramework.StorageError : Swift.Hashable {}
extension KovaleeFramework.AdjustConfiguration.Environment : Swift.Equatable {}
extension KovaleeFramework.AdjustConfiguration.Environment : Swift.Hashable {}
extension KovaleeFramework.AdjustConfiguration.Environment : Swift.RawRepresentable {}
extension KovaleeFramework.KovaleeError : Swift.Equatable {}
extension KovaleeFramework.KovaleeError : Swift.Hashable {}
extension KovaleeFramework.ConversionValue.CoarseValue : Swift.Equatable {}
extension KovaleeFramework.ConversionValue.CoarseValue : Swift.Hashable {}
extension KovaleeFramework.ConversionValue.CoarseValue : Swift.RawRepresentable {}
